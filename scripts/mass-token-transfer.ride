{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let WAVESIDSTR = "WAVES"

func toAssetBytes(assetStr: String) = {
    if (assetStr == WAVESIDSTR) then unit else assetStr.fromBase58String()
}

@Callable(i)
func massTransfer(recipients: List[String], amounts: List[Int], assets: List[String]) = {
    func makeScriptTransfers(accum: (List[ScriptTransfer], Int), next: Int) = {
        let (result, j) = accum
        (result :+ ScriptTransfer(addressFromStringValue(recipients[j]), next, toAssetBytes(assets[j])), j + 1)
    }

    let recipientsSize = recipients.size()

    # Yeah I know looks like spaghetti code -___-
    let result = match recipientsSize {
        case 1 => FOLD<1>(amounts, ([], 0), makeScriptTransfers)
        case 2 => FOLD<2>(amounts, ([], 0), makeScriptTransfers)
        # ... TODO: Other branches
        case 100 => FOLD<100>(amounts, ([], 0), makeScriptTransfers)
        case _ => throw("Unsupported recipients quantity")
    }

    result._1
}